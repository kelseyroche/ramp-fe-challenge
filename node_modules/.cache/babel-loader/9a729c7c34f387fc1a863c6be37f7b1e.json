{"ast":null,"code":"var _jsxFileName = \"/project/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\n// import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\n// import { InputSelect } from \"./components/InputSelect\"\n// import { Instructions } from \"./components/Instructions\"\n// import { Transactions } from \"./components/Transactions\"\n// import { useEmployees } from \"./hooks/useEmployees\"\n// import { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\n// import { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\n// import { EMPTY_EMPLOYEE } from \"./utils/constants\"\n// import { Employee } from \"./utils/types\"\n// export function App() {\n//   const { data: employees, ...employeeUtils } = useEmployees()\n//   const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n//   const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n//   const [isLoading, setIsLoading] = useState(false)\n//   const transactions = useMemo(\n//     () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n//     [paginatedTransactions, transactionsByEmployee]\n//   )\n//   const loadAllTransactions = useCallback(async () => {\n//     setIsLoading(true)\n//     transactionsByEmployeeUtils.invalidateData()\n//     await employeeUtils.fetchAll()\n//     await paginatedTransactionsUtils.fetchAll()\n//     setIsLoading(false)\n//   }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n//   const loadTransactionsByEmployee = useCallback(\n//     async (employeeId: string) => {\n//       paginatedTransactionsUtils.invalidateData()\n//       await transactionsByEmployeeUtils.fetchById(employeeId)\n//     },\n//     [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n//   )\n//   useEffect(() => {\n//     if (employees === null && !employeeUtils.loading) {\n//       loadAllTransactions()\n//     }\n//   }, [employeeUtils.loading, employees, loadAllTransactions])\n//   return (\n//     <Fragment>\n//       <main className=\"MainContainer\">\n//         <Instructions />\n//         <hr className=\"RampBreak--l\" />\n//         <InputSelect<Employee>\n//           isLoading={isLoading}\n//           defaultValue={EMPTY_EMPLOYEE}\n//           items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n//           label=\"Filter by employee\"\n//           loadingLabel=\"Loading employees\"\n//           parseItem={(item) => ({\n//             value: item.id,\n//             label: `${item.firstName} ${item.lastName}`,\n//           })}\n//           onChange={async (newValue) => {\n//             if (newValue === null) {\n//               return\n//             }\n//             await loadTransactionsByEmployee(newValue.id)\n//           }}\n//         />\n//         <div className=\"RampBreak--l\" />\n//         <div className=\"RampGrid\">\n//           <Transactions transactions={transactions} />\n//           {transactions !== null && (\n//             <button\n//               className=\"RampButton\"\n//               disabled={paginatedTransactionsUtils.loading}\n//               onClick={async () => {\n//                 await loadAllTransactions()\n//               }}\n//             >\n//               View More\n//             </button>\n//           )}\n//         </div>\n//       </main>\n//     </Fragment>\n//   )\n// }\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [transactions, setTransactions] = useState([]); // Explicitly typed\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    const result = await paginatedTransactionsUtils.fetchAll();\n\n    if (result !== null && result !== void 0 && result.data) {\n      // Append new transactions to the existing ones\n      setTransactions(prevTransactions => [...prevTransactions, ...result.data]);\n    }\n\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    const employeeTransactions = await transactionsByEmployeeUtils.fetchById(employeeId);\n\n    if (employeeTransactions) {\n      // Replace with transactions by employee\n      setTransactions(employeeTransactions);\n    }\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"1GMiyFFNBlIpcaEQxoVHd3Q36os=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","transactions","setTransactions","loadAllTransactions","invalidateData","fetchAll","result","prevTransactions","loadTransactionsByEmployee","employeeId","employeeTransactions","fetchById","loading","item","value","id","label","firstName","lastName","newValue","nextPage"],"sources":["/project/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["// import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\n// import { InputSelect } from \"./components/InputSelect\"\n// import { Instructions } from \"./components/Instructions\"\n// import { Transactions } from \"./components/Transactions\"\n// import { useEmployees } from \"./hooks/useEmployees\"\n// import { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\n// import { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\n// import { EMPTY_EMPLOYEE } from \"./utils/constants\"\n// import { Employee } from \"./utils/types\"\n\n// export function App() {\n//   const { data: employees, ...employeeUtils } = useEmployees()\n//   const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n//   const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n//   const [isLoading, setIsLoading] = useState(false)\n\n//   const transactions = useMemo(\n//     () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n//     [paginatedTransactions, transactionsByEmployee]\n//   )\n\n//   const loadAllTransactions = useCallback(async () => {\n//     setIsLoading(true)\n//     transactionsByEmployeeUtils.invalidateData()\n\n//     await employeeUtils.fetchAll()\n//     await paginatedTransactionsUtils.fetchAll()\n\n//     setIsLoading(false)\n//   }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n//   const loadTransactionsByEmployee = useCallback(\n//     async (employeeId: string) => {\n//       paginatedTransactionsUtils.invalidateData()\n//       await transactionsByEmployeeUtils.fetchById(employeeId)\n//     },\n//     [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n//   )\n\n//   useEffect(() => {\n//     if (employees === null && !employeeUtils.loading) {\n//       loadAllTransactions()\n//     }\n//   }, [employeeUtils.loading, employees, loadAllTransactions])\n\n//   return (\n//     <Fragment>\n//       <main className=\"MainContainer\">\n//         <Instructions />\n\n//         <hr className=\"RampBreak--l\" />\n\n//         <InputSelect<Employee>\n//           isLoading={isLoading}\n//           defaultValue={EMPTY_EMPLOYEE}\n//           items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n//           label=\"Filter by employee\"\n//           loadingLabel=\"Loading employees\"\n//           parseItem={(item) => ({\n//             value: item.id,\n//             label: `${item.firstName} ${item.lastName}`,\n//           })}\n//           onChange={async (newValue) => {\n//             if (newValue === null) {\n//               return\n//             }\n\n//             await loadTransactionsByEmployee(newValue.id)\n//           }}\n//         />\n\n//         <div className=\"RampBreak--l\" />\n\n//         <div className=\"RampGrid\">\n//           <Transactions transactions={transactions} />\n\n//           {transactions !== null && (\n//             <button\n//               className=\"RampButton\"\n//               disabled={paginatedTransactionsUtils.loading}\n//               onClick={async () => {\n//                 await loadAllTransactions()\n//               }}\n//             >\n//               View More\n//             </button>\n//           )}\n//         </div>\n//       </main>\n//     </Fragment>\n//   )\n// }\nimport { Fragment, useCallback, useEffect, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [transactions, setTransactions] = useState<Transaction[]>([]) // Explicitly typed\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll()\n    const result = await paginatedTransactionsUtils.fetchAll()\n    if (result?.data) {\n      // Append new transactions to the existing ones\n      setTransactions((prevTransactions) => [...prevTransactions, ...result.data])\n    }\n\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      const employeeTransactions = await transactionsByEmployeeUtils.fetchById(employeeId)\n      if (employeeTransactions) {\n        // Replace with transactions by employee\n        setTransactions(employeeTransactions)\n      }\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n\n            await loadTransactionsByEmployee(newValue.id)\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {paginatedTransactions?.nextPage !== null && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,EAA2CC,QAA3C,QAA2D,OAA3D;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,wBAAT,QAAyC,kCAAzC;AACA,SAASC,yBAAT,QAA0C,mCAA1C;AACA,SAASC,cAAT,QAA+B,mBAA/B;;AAGA,OAAO,SAASC,GAAT,GAAe;EAAA;;EACpB,MAAM;IAAEC,IAAI,EAAEC,SAAR;IAAmB,GAAGC;EAAtB,IAAwCP,YAAY,EAA1D;EACA,MAAM;IAAEK,IAAI,EAAEG,qBAAR;IAA+B,GAAGC;EAAlC,IAAiER,wBAAwB,EAA/F;EACA,MAAM;IAAEI,IAAI,EAAEK,sBAAR;IAAgC,GAAGC;EAAnC,IAAmET,yBAAyB,EAAlG;EACA,MAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACkB,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,CAAgB,EAAhB,CAAhD,CALoB,CAKgD;;EAEpE,MAAMoB,mBAAmB,GAAGtB,WAAW,CAAC,YAAY;IAClDmB,YAAY,CAAC,IAAD,CAAZ;IACAF,2BAA2B,CAACM,cAA5B;IAEA,MAAMV,aAAa,CAACW,QAAd,EAAN;IACA,MAAMC,MAAM,GAAG,MAAMV,0BAA0B,CAACS,QAA3B,EAArB;;IACA,IAAIC,MAAJ,aAAIA,MAAJ,eAAIA,MAAM,CAAEd,IAAZ,EAAkB;MAChB;MACAU,eAAe,CAAEK,gBAAD,IAAsB,CAAC,GAAGA,gBAAJ,EAAsB,GAAGD,MAAM,CAACd,IAAhC,CAAvB,CAAf;IACD;;IAEDQ,YAAY,CAAC,KAAD,CAAZ;EACD,CAZsC,EAYpC,CAACN,aAAD,EAAgBE,0BAAhB,EAA4CE,2BAA5C,CAZoC,CAAvC;EAcA,MAAMU,0BAA0B,GAAG3B,WAAW,CAC5C,MAAO4B,UAAP,IAA8B;IAC5Bb,0BAA0B,CAACQ,cAA3B;IACA,MAAMM,oBAAoB,GAAG,MAAMZ,2BAA2B,CAACa,SAA5B,CAAsCF,UAAtC,CAAnC;;IACA,IAAIC,oBAAJ,EAA0B;MACxB;MACAR,eAAe,CAACQ,oBAAD,CAAf;IACD;EACF,CAR2C,EAS5C,CAACd,0BAAD,EAA6BE,2BAA7B,CAT4C,CAA9C;EAYAhB,SAAS,CAAC,MAAM;IACd,IAAIW,SAAS,KAAK,IAAd,IAAsB,CAACC,aAAa,CAACkB,OAAzC,EAAkD;MAChDT,mBAAmB;IACpB;EACF,CAJQ,EAIN,CAACT,aAAa,CAACkB,OAAf,EAAwBnB,SAAxB,EAAmCU,mBAAnC,CAJM,CAAT;EAMA,oBACE,QAAC,QAAD;IAAA,uBACE;MAAM,SAAS,EAAC,eAAhB;MAAA,wBACE,QAAC,YAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAGE;QAAI,SAAS,EAAC;MAAd;QAAA;QAAA;QAAA;MAAA,QAHF,eAKE,QAAC,WAAD;QACE,SAAS,EAAEJ,SADb;QAEE,YAAY,EAAET,cAFhB;QAGE,KAAK,EAAEG,SAAS,KAAK,IAAd,GAAqB,EAArB,GAA0B,CAACH,cAAD,EAAiB,GAAGG,SAApB,CAHnC;QAIE,KAAK,EAAC,oBAJR;QAKE,YAAY,EAAC,mBALf;QAME,SAAS,EAAGoB,IAAD,KAAW;UACpBC,KAAK,EAAED,IAAI,CAACE,EADQ;UAEpBC,KAAK,EAAG,GAAEH,IAAI,CAACI,SAAU,IAAGJ,IAAI,CAACK,QAAS;QAFtB,CAAX,CANb;QAUE,QAAQ,EAAE,MAAOC,QAAP,IAAoB;UAC5B,IAAIA,QAAQ,KAAK,IAAjB,EAAuB;YACrB;UACD;;UAED,MAAMX,0BAA0B,CAACW,QAAQ,CAACJ,EAAV,CAAhC;QACD;MAhBH;QAAA;QAAA;QAAA;MAAA,QALF,eAwBE;QAAK,SAAS,EAAC;MAAf;QAAA;QAAA;QAAA;MAAA,QAxBF,eA0BE;QAAK,SAAS,EAAC,UAAf;QAAA,wBACE,QAAC,YAAD;UAAc,YAAY,EAAEd;QAA5B;UAAA;UAAA;UAAA;QAAA,QADF,EAGG,CAAAN,qBAAqB,SAArB,IAAAA,qBAAqB,WAArB,YAAAA,qBAAqB,CAAEyB,QAAvB,MAAoC,IAApC,iBACC;UACE,SAAS,EAAC,YADZ;UAEE,QAAQ,EAAExB,0BAA0B,CAACgB,OAFvC;UAGE,OAAO,EAAE,YAAY;YACnB,MAAMT,mBAAmB,EAAzB;UACD,CALH;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAJJ;MAAA;QAAA;QAAA;QAAA;MAAA,QA1BF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AA8CD;;GArFeZ,G;UACgCJ,Y,EACyBC,wB,EACEC,yB;;;KAH3DE,G"},"metadata":{},"sourceType":"module"}
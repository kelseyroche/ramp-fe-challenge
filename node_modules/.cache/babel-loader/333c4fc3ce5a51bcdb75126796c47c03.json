{"ast":null,"code":"var _jsxFileName = \"/project/ramp-fe-challenge/src/components/InputSelect/index.tsx\",\n    _s = $RefreshSig$();\n\nimport Downshift from \"downshift\";\nimport { useCallback, useState, useEffect } from \"react\";\nimport classNames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function InputSelect(_ref) {\n  _s();\n\n  let {\n    label,\n    defaultValue,\n    onChange: consumerOnChange,\n    items,\n    parseItem,\n    isLoading,\n    loadingLabel\n  } = _ref;\n  const [selectedValue, setSelectedValue] = useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : null);\n  const [dropdownPosition, setDropdownPosition] = useState({\n    top: 0,\n    left: 0\n  });\n  const onChange = useCallback(selectedItem => {\n    if (selectedItem === null) {\n      return;\n    }\n\n    consumerOnChange(selectedItem);\n    setSelectedValue(selectedItem);\n  }, [consumerOnChange]);\n  useEffect(() => {\n    const handleScroll = () => {\n      const target = document.querySelector(\".RampInputSelect--input\");\n\n      if (target) {\n        setDropdownPosition(getDropdownPosition(target));\n      }\n    };\n\n    if (isOpen) {\n      window.addEventListener(\"scroll\", handleScroll);\n    }\n\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [isOpen]);\n  return /*#__PURE__*/_jsxDEV(Downshift, {\n    id: \"RampSelect\",\n    onChange: onChange,\n    selectedItem: selectedValue,\n    itemToString: item => item ? parseItem(item).label : \"\",\n    children: _ref2 => {\n      let {\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue\n      } = _ref2;\n      const toggleProps = getToggleButtonProps();\n      const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampInputSelect--root\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"RampText--s RampText--hushed\",\n          ...getLabelProps(),\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampBreak--xs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampInputSelect--input\",\n          onClick: event => {\n            setDropdownPosition(getDropdownPosition(event.target));\n            toggleProps.onClick(event);\n          },\n          children: inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classNames(\"RampInputSelect--dropdown-container\", {\n            \"RampInputSelect--dropdown-container-opened\": isOpen\n          }),\n          ...getMenuProps(),\n          style: {\n            top: dropdownPosition.top,\n            left: dropdownPosition.left\n          },\n          children: renderItems()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this);\n\n      function renderItems() {\n        if (!isOpen) {\n          return null;\n        }\n\n        if (isLoading) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: [loadingLabel, \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 20\n          }, this);\n        }\n\n        if (items.length === 0) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: \"No items\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 20\n          }, this);\n        }\n\n        return items.map((item, index) => {\n          const parsedItem = parseItem(item);\n          return /*#__PURE__*/_jsxDEV(\"div\", { ...getItemProps({\n              key: parsedItem.value,\n              index,\n              item,\n              className: classNames(\"RampInputSelect--dropdown-item\", {\n                \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                \"RampInputSelect--dropdown-item-selected\": (parsedSelectedItem === null || parsedSelectedItem === void 0 ? void 0 : parsedSelectedItem.value) === parsedItem.value\n              })\n            }),\n            children: parsedItem.label\n          }, parsedItem.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this);\n        });\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InputSelect, \"s0+WjusL4UOBhU2+2PWKdfhaw7M=\");\n\n_c = InputSelect;\n\nconst getDropdownPosition = target => {\n  if (target instanceof Element) {\n    const {\n      top,\n      left\n    } = target.getBoundingClientRect();\n    const {\n      scrollY\n    } = window;\n    return {\n      top: scrollY + top + 63,\n      left\n    };\n  }\n\n  return {\n    top: 0,\n    left: 0\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"InputSelect\");","map":{"version":3,"names":["Downshift","useCallback","useState","useEffect","classNames","InputSelect","label","defaultValue","onChange","consumerOnChange","items","parseItem","isLoading","loadingLabel","selectedValue","setSelectedValue","dropdownPosition","setDropdownPosition","top","left","selectedItem","handleScroll","target","document","querySelector","getDropdownPosition","isOpen","window","addEventListener","removeEventListener","item","getItemProps","getLabelProps","getMenuProps","highlightedIndex","getToggleButtonProps","inputValue","toggleProps","parsedSelectedItem","event","onClick","renderItems","length","map","index","parsedItem","key","value","className","Element","getBoundingClientRect","scrollY"],"sources":["/project/ramp-fe-challenge/src/components/InputSelect/index.tsx"],"sourcesContent":["import Downshift from \"downshift\"\nimport { useCallback, useState, useEffect } from \"react\"\nimport classNames from \"classnames\"\nimport { DropdownPosition, GetDropdownPositionFn, InputSelectOnChange, InputSelectProps } from \"./types\"\n\nexport function InputSelect<TItem>({\n  label,\n  defaultValue,\n  onChange: consumerOnChange,\n  items,\n  parseItem,\n  isLoading,\n  loadingLabel,\n}: InputSelectProps<TItem>) {\n  const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null)\n  const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({ top: 0, left: 0 })\n\n  const onChange = useCallback<InputSelectOnChange<TItem>>(\n    (selectedItem) => {\n      if (selectedItem === null) {\n        return\n      }\n\n      consumerOnChange(selectedItem)\n      setSelectedValue(selectedItem)\n    },\n    [consumerOnChange]\n  )\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const target = document.querySelector(\".RampInputSelect--input\")\n      if (target) {\n        setDropdownPosition(getDropdownPosition(target))\n      }\n    }\n\n    if (isOpen) {\n      window.addEventListener(\"scroll\", handleScroll)\n    }\n\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll)\n    }\n  }, [isOpen])\n\n  return (\n    <Downshift<TItem>\n      id=\"RampSelect\"\n      onChange={onChange}\n      selectedItem={selectedValue}\n      itemToString={(item) => (item ? parseItem(item).label : \"\")}\n    >\n      {({\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue,\n      }) => {\n        const toggleProps = getToggleButtonProps()\n        const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem)\n\n        return (\n          <div className=\"RampInputSelect--root\">\n            <label className=\"RampText--s RampText--hushed\" {...getLabelProps()}>\n              {label}\n            </label>\n            <div className=\"RampBreak--xs\" />\n            <div\n              className=\"RampInputSelect--input\"\n              onClick={(event) => {\n                setDropdownPosition(getDropdownPosition(event.target))\n                toggleProps.onClick(event)\n              }}\n            >\n              {inputValue}\n            </div>\n\n            <div\n              className={classNames(\"RampInputSelect--dropdown-container\", {\n                \"RampInputSelect--dropdown-container-opened\": isOpen,\n              })}\n              {...getMenuProps()}\n              style={{ top: dropdownPosition.top, left: dropdownPosition.left }}\n            >\n              {renderItems()}\n            </div>\n          </div>\n        )\n\n        function renderItems() {\n          if (!isOpen) {\n            return null\n          }\n\n          if (isLoading) {\n            return <div className=\"RampInputSelect--dropdown-item\">{loadingLabel}...</div>\n          }\n\n          if (items.length === 0) {\n            return <div className=\"RampInputSelect--dropdown-item\">No items</div>\n          }\n\n          return items.map((item, index) => {\n            const parsedItem = parseItem(item)\n            return (\n              <div\n                key={parsedItem.value}\n                {...getItemProps({\n                  key: parsedItem.value,\n                  index,\n                  item,\n                  className: classNames(\"RampInputSelect--dropdown-item\", {\n                    \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                    \"RampInputSelect--dropdown-item-selected\":\n                      parsedSelectedItem?.value === parsedItem.value,\n                  }),\n                })}\n              >\n                {parsedItem.label}\n              </div>\n            )\n          })\n        }\n      }}\n    </Downshift>\n  )\n}\n\nconst getDropdownPosition: GetDropdownPositionFn = (target) => {\n  if (target instanceof Element) {\n    const { top, left } = target.getBoundingClientRect()\n    const { scrollY } = window\n    return {\n      top: scrollY + top + 63,\n      left,\n    }\n  }\n\n  return { top: 0, left: 0 }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import { useCallback, useContext } from \"react\"\n// import { AppContext } from \"../utils/context\"\n// import { fakeFetch, RegisteredEndpoints } from \"../utils/fetch\"\n// import { useWrappedRequest } from \"./useWrappedRequest\"\n// export function useCustomFetch() {\n//   const { cache } = useContext(AppContext)\n//   const { loading, wrappedRequest } = useWrappedRequest()\n//   const fetchWithCache = useCallback(\n//     async <TData, TParams extends object = object>(\n//       endpoint: RegisteredEndpoints,\n//       params?: TParams\n//     ): Promise<TData | null> =>\n//       wrappedRequest<TData>(async () => {\n//         const cacheKey = getCacheKey(endpoint, params)\n//         const cacheResponse = cache?.current.get(cacheKey)\n//         if (cacheResponse) {\n//           const data = JSON.parse(cacheResponse)\n//           return data as Promise<TData>\n//         }\n//         const result = await fakeFetch<TData>(endpoint, params)\n//         cache?.current.set(cacheKey, JSON.stringify(result))\n//         return result\n//       }),\n//     [cache, wrappedRequest]\n//   )\n//   const fetchWithoutCache = useCallback(\n//     async <TData, TParams extends object = object>(\n//       endpoint: RegisteredEndpoints,\n//       params?: TParams\n//     ): Promise<TData | null> =>\n//       wrappedRequest<TData>(async () => {\n//         const result = await fakeFetch<TData>(endpoint, params)\n//         return result\n//       }),\n//     [wrappedRequest]\n//   )\n//   const clearCache = useCallback(() => {\n//     if (cache?.current === undefined) {\n//       return\n//     }\n//     cache.current = new Map<string, string>()\n//   }, [cache])\n//   const clearCacheByEndpoint = useCallback(\n//     (endpointsToClear: RegisteredEndpoints[]) => {\n//       if (cache?.current === undefined) {\n//         return\n//       }\n//       const cacheKeys = Array.from(cache.current.keys())\n//       for (const key of cacheKeys) {\n//         const clearKey = endpointsToClear.some((endpoint) => key.startsWith(endpoint))\n//         if (clearKey) {\n//           cache.current.delete(key)\n//         }\n//       }\n//     },\n//     [cache]\n//   )\n//   return { fetchWithCache, fetchWithoutCache, clearCache, clearCacheByEndpoint, loading }\n// }\n// function getCacheKey(endpoint: RegisteredEndpoints, params?: object) {\n//   return `${endpoint}${params ? `@${JSON.stringify(params)}` : \"\"}`\n// }\nimport { useCallback } from \"react\";\nimport { fakeFetch } from \"../utils/fetch\";\nimport { useWrappedRequest } from \"./useWrappedRequest\";\nexport function useCustomFetch() {\n  _s();\n\n  const {\n    loading,\n    wrappedRequest\n  } = useWrappedRequest();\n  const fetchWithCache = useCallback(async (endpoint, params) => wrappedRequest(async () => {\n    const result = await fakeFetch(endpoint, params);\n    return result;\n  }), [wrappedRequest]);\n  return {\n    fetchWithCache,\n    loading\n  };\n}\n\n_s(useCustomFetch, \"K4iwzZWcGNX/+XWKBCQnYe2bTn0=\", false, function () {\n  return [useWrappedRequest];\n});","map":{"version":3,"names":["useCallback","fakeFetch","useWrappedRequest","useCustomFetch","loading","wrappedRequest","fetchWithCache","endpoint","params","result"],"sources":["/project/ramp-fe-challenge/src/hooks/useCustomFetch.ts"],"sourcesContent":["// import { useCallback, useContext } from \"react\"\n// import { AppContext } from \"../utils/context\"\n// import { fakeFetch, RegisteredEndpoints } from \"../utils/fetch\"\n// import { useWrappedRequest } from \"./useWrappedRequest\"\n\n// export function useCustomFetch() {\n//   const { cache } = useContext(AppContext)\n//   const { loading, wrappedRequest } = useWrappedRequest()\n\n//   const fetchWithCache = useCallback(\n//     async <TData, TParams extends object = object>(\n//       endpoint: RegisteredEndpoints,\n//       params?: TParams\n//     ): Promise<TData | null> =>\n//       wrappedRequest<TData>(async () => {\n//         const cacheKey = getCacheKey(endpoint, params)\n//         const cacheResponse = cache?.current.get(cacheKey)\n\n//         if (cacheResponse) {\n//           const data = JSON.parse(cacheResponse)\n//           return data as Promise<TData>\n//         }\n\n//         const result = await fakeFetch<TData>(endpoint, params)\n//         cache?.current.set(cacheKey, JSON.stringify(result))\n//         return result\n//       }),\n//     [cache, wrappedRequest]\n//   )\n\n//   const fetchWithoutCache = useCallback(\n//     async <TData, TParams extends object = object>(\n//       endpoint: RegisteredEndpoints,\n//       params?: TParams\n//     ): Promise<TData | null> =>\n//       wrappedRequest<TData>(async () => {\n//         const result = await fakeFetch<TData>(endpoint, params)\n//         return result\n//       }),\n//     [wrappedRequest]\n//   )\n\n//   const clearCache = useCallback(() => {\n//     if (cache?.current === undefined) {\n//       return\n//     }\n\n//     cache.current = new Map<string, string>()\n//   }, [cache])\n\n//   const clearCacheByEndpoint = useCallback(\n//     (endpointsToClear: RegisteredEndpoints[]) => {\n//       if (cache?.current === undefined) {\n//         return\n//       }\n\n//       const cacheKeys = Array.from(cache.current.keys())\n\n//       for (const key of cacheKeys) {\n//         const clearKey = endpointsToClear.some((endpoint) => key.startsWith(endpoint))\n\n//         if (clearKey) {\n//           cache.current.delete(key)\n//         }\n//       }\n//     },\n//     [cache]\n//   )\n\n//   return { fetchWithCache, fetchWithoutCache, clearCache, clearCacheByEndpoint, loading }\n// }\n\n// function getCacheKey(endpoint: RegisteredEndpoints, params?: object) {\n//   return `${endpoint}${params ? `@${JSON.stringify(params)}` : \"\"}`\n// }\n\nimport { useCallback, useState } from \"react\"\nimport { fakeFetch, RegisteredEndpoints } from \"../utils/fetch\"\nimport { useWrappedRequest } from \"./useWrappedRequest\"\n\nexport function useCustomFetch() {\n  const { loading, wrappedRequest } = useWrappedRequest()\n\n  const fetchWithCache = useCallback(\n    async <TData, TParams extends object = object>(\n      endpoint: RegisteredEndpoints,\n      params?: TParams\n    ): Promise<TData | null> =>\n      wrappedRequest<TData>(async () => {\n        const result = await fakeFetch<TData>(endpoint, params)\n        return result\n      }),\n    [wrappedRequest]\n  )\n\n  return { fetchWithCache, loading }\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA,SAASA,WAAT,QAAsC,OAAtC;AACA,SAASC,SAAT,QAA+C,gBAA/C;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,OAAO,SAASC,cAAT,GAA0B;EAAA;;EAC/B,MAAM;IAAEC,OAAF;IAAWC;EAAX,IAA8BH,iBAAiB,EAArD;EAEA,MAAMI,cAAc,GAAGN,WAAW,CAChC,OACEO,QADF,EAEEC,MAFF,KAIEH,cAAc,CAAQ,YAAY;IAChC,MAAMI,MAAM,GAAG,MAAMR,SAAS,CAAQM,QAAR,EAAkBC,MAAlB,CAA9B;IACA,OAAOC,MAAP;EACD,CAHa,CALgB,EAShC,CAACJ,cAAD,CATgC,CAAlC;EAYA,OAAO;IAAEC,cAAF;IAAkBF;EAAlB,CAAP;AACD;;GAhBeD,c;UACsBD,iB"},"metadata":{},"sourceType":"module"}